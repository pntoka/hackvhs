from flask import Flask, request, jsonify
from flask_cors import CORS
from fetchai.crypto import Identity
from fetchai import fetch
from fetchai.registration import register_with_agentverse
from fetchai.communication import parse_message_from_agent, send_message_to_agent
import logging
import os
from dotenv import load_dotenv

RAG_AGENT_ADDRESS = "agent1q0wnue0q2ddyyya8vklh2lpk4cy0yvfqwwqycc8nwgz0x0z7qhsjj0ewtlr"
ORCHESTRATOR_AGENT = "banana"

load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
app = Flask(__name__)

CORS(app)

client_identity = None  # Agent address and other details of the client
profile_response = None  # Profile generated by the profiling agent
rag_response = None  # Response generated by the RAG agent

def init_client():
    """Initialize and register the client agent."""
    global client_identity
    try:
        # Load the client identity from environment variables
        client_identity = Identity.from_seed(os.getenv("CLIENT_KEY"), 0)
        logger.info(f"Client agent started with address: {client_identity.address}")

        # Define the client agent's metadata
        readme = """
        <description>Frontend client that interacts with profiling and RAG agents.</description>
        <use_cases>
            <use_case>Send survey responses to profiling agents and receive tailored recommendations.</use_case>
        </use_cases>
        <payload_requirements>
            <description>Expects responses with user profiles and RAG outputs.</description>
            <payload>
                <requirement>
                    <parameter>survey_responses</parameter>
                    <description>User's answers to the survey questions.</description>
                </requirement>
            </payload>
        </payload_requirements>
        """

        # Register the agent with Agentverse
        register_with_agentverse(
            identity=client_identity,
            url="http://localhost:5002/api/webhook",
            agentverse_token=os.getenv("AGENTVERSE_API_KEY"),
            agent_title="Survey Frontend Client",
            readme=readme
        )

        logger.info("Client agent registration complete!")

    except Exception as e:
        logger.error(f"Initialization error: {e}")
        raise

@app.route('/api/search-agents', methods=['GET'])
def search_agents():
    """Search for available profiling agents."""
    try:
        # Fetch available profiling agents
        available_ais = fetch.ai('User Profiling Agent that creates profiles from survey responses.')
        agents = available_ais.get('ais', [])

        extracted_data = []
        for agent in agents:
            name = agent.get('name')
            address = agent.get('address')
            extracted_data.append({
                'name': name,
                'address': address,
            })

        response = jsonify(extracted_data)
        response.headers.add('Content-Type', 'application/json; charset=utf-8')
        response.headers.add('Access-Control-Allow-Origin', '*')
        response.headers.add('Access-Control-Allow-Headers', 'Content-Type')
        return response, 200

    except Exception as e:
        logger.error(f"Error finding agents: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/api/send-survey', methods=['POST'])
def send_survey():
    """Send survey responses to the selected profiling agent."""
    global profile_response
    profile_response = None

    try:
        # Parse the request payload
        data = request.json
        survey_responses = data.get('surveyResponses')
        logger.info(f"Successfully accessed surveyresponses, {survey_responses}")
        agent_address = data.get('agentAddress')

        # Validate the input data
        if not survey_responses or not agent_address:
            return jsonify({"error": "Missing survey responses or agent address"}), 400

        logger.info(f"Sending survey responses to {agent_address}")

        # Prepare and send the payload to the agent
        payload = {"survey_responses": survey_responses}
        send_message_to_agent(
            client_identity, # Frontend client identity
            agent_address,  # Profiling agent address
            payload           # Payload containing the survey responses
        )

        return jsonify({"status": "survey_sent"})

    except Exception as e:
        logger.error(f"Error sending survey responses: {e}")
        return jsonify({"error": str(e)}), 500


@app.route('/api/get-rag-response', methods=['GET'])
def get_rag_response():
    """Get the most recent RAG response."""
    global rag_response
    try:
        if rag_response:
            response = rag_response
            rag_response = None  # Clear the response after sending
            return jsonify({"rag_response": response})
        else:
            return jsonify({"status": "no_rag_response"}), 200
    except Exception as e:
        logger.error(f"Error getting RAG response: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/api/webhook', methods=['POST'])
def webhook():
    """Handle incoming messages from agents."""
    global profile_response
    global rag_response
    try:
        # Parse the incoming webhook message
        data = request.get_data().decode("utf-8")
        logger.info("Received message")

        message = parse_message_from_agent(data)
        payload = message.payload

        if 'profile' in payload:
            profile_response = payload['profile']
            logger.info(f"Received profile: {profile_response}")

            # Now, send the profile to the RAG agent
            # First, find RAG agents
            # rag_agents = fetch.ai('This agent provides responses based on a given profile using RAG.')

            # For now, just pick the first one
            # if rag_agents and 'ais' in rag_agents and len(rag_agents['ais']) > 0:
            #     rag_agent = rag_agents['ais'][0]
            #     rag_agent_address = rag_agent.get('address')

            #     logger.info(f"Sending profile to RAG agent at {rag_agent_address}")

            rag_agent_address = RAG_AGENT_ADDRESS
            # Send the profile to the RAG agent
            payload = {"profile": profile_response}
            send_message_to_agent(
                client_identity,
                rag_agent_address,
                payload
            )

        elif 'rag_response' in payload:
            rag_response = payload['rag_response']
            logger.info(f"Received RAG response: {rag_response}")

        else:
            logger.warning("Unknown message received")

        return jsonify({"status": "success"})

    except Exception as e:
        logger.error(f"Error in webhook: {e}")
        return jsonify({"error": str(e)}), 500

def start_server():
    """Start the Flask server."""
    try:
        # Load environment variables
        load_dotenv()
        init_client()
        app.run(host="0.0.0.0", port=5002)
    except Exception as e:
        logger.error(f"Server error: {e}")
        raise

if __name__ == "__main__":
    start_server()


